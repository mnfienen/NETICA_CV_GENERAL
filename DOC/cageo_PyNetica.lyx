#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass elsarticle
\begin_preamble
\usepackage{lineno}
\renewcommand\[{\begin{equation}}
\renewcommand\]{\end{equation}}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing double
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine natbib_authoryear
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
CVNetica--A cross-validation package driving Netica with Python 
\end_layout

\begin_layout Author
Michael N.
 Fienen
\end_layout

\begin_layout Address
US Geological Survey, Wisconsin Water Science Center, 8505 Research Way,
 Middleton WI 53562 USA
\end_layout

\begin_layout Email
mnfienen@usgs.gov
\end_layout

\begin_layout Author
Nathaniel G.
 Plant
\end_layout

\begin_layout Address
US Geological Survey, St.
 Petersburg Coastal and Marine Science Center, 600 Fourth Street South,
 St.
 Petersburg, Florida, 33701, USA.
\end_layout

\begin_layout Email
nplant@usgs.gov
\end_layout

\begin_layout Abstract
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{linenumbers}
\end_layout

\end_inset

Popular use of Netica for various applications.
 Lip service to cross-validation but few implementations.
 Filling that gap with open-souce tools in Python.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{linenumbers}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{linenumbers}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Over the past 20 years or so, the use of Bayesian Networks 
\begin_inset CommandInset citation
LatexCommand citep
before "BN; "
key "JensenNielsen2001"

\end_inset

 has increased greatly, in large measure due to the availability of commercial
 software packages such as Netica 
\begin_inset CommandInset citation
LatexCommand citep
key "Netica"

\end_inset

 and Hugin 
\begin_inset CommandInset citation
LatexCommand citep
key "Hugin"

\end_inset

 among many others.
 Applications in water resources have included groundwater management 
\begin_inset CommandInset citation
LatexCommand citep
key "mdso2007,Molina2010,Molina2013"

\end_inset

, and model emulation 
\begin_inset CommandInset citation
LatexCommand citep
key "plant2011a,plant2011b,FienenBNWRR"

\end_inset

.
 This builds on a history of applications in national security, economics,
 and ecology.
\end_layout

\begin_layout Standard
An important topic that is discussed less in the literature than general
 applications of BNs is the need for formal validation of performance 
\begin_inset CommandInset citation
LatexCommand citep
key "Chen2012,Marcot2012"

\end_inset

.
 Some validation metrics are calculable by the commercial software packages,
 but substantial gaps in capabilities remain.
 Fortunately, at least in the case of Netica, an application programming
 interface (API) exists with versions in multiple programming languages.
 To create a toolbox of performance metrics, we used Python 
\begin_inset CommandInset citation
LatexCommand citep
key "python"

\end_inset

 with the Netica C APIs.
 These APIs expose most of Netica's functionality, through functions, to
 external programming.
 Among the languages available, C was chosen because the ultimate goal was
 to interface with Python 2.7.6.
 We discuss the technical challenges associated with running C APIs using
 Python and describe the toolbox of validation metrics included in this
 work.
\end_layout

\begin_layout Standard
Building on techniques introduced by 
\begin_inset CommandInset citation
LatexCommand citet
key "FienenBNWRR"

\end_inset

, we developed tools addressing two fundamental questions of Bayesian network
 performance: how does predictive performance compare with calibration quality?;
 and how does the complexity of the underlying network impact predictive
 and calibration performance? Cross-validation is used to answer both questions,
 and the number of bins per node is used as a metric of complexity to answer
 the second.
 These specific questions are evaluated in this work but the framework is
 presented to allow for other validation metrics and techniques beyond those
 presented here.
\end_layout

\begin_layout Standard
Model 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{linenumbers}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Bayesian Networks
\end_layout

\begin_layout Standard
A Bayesian network (BN) is a directed acyclic graph 
\begin_inset CommandInset citation
LatexCommand citep
key "Korb2004"

\end_inset

, composed of nodes and edges.
 Nodes represent states of parameters or outcomes and can be Boolean or
 discrete bins.
 Continuous values of parameters must be discretized into bins.
 Edges form the connections between nodes and represent a correlated connection
 between the properties represented by the nodes.
 The entire catalog of these correlations make up conditional probability
 tables (CPTs).
 Nodes can be thought of as input (e.g.
 forcing) nodes and output (e.g.
 response) nodes, although this distinction is not a sharp one as the correlatio
ns learned by the BN are ambivalent with respect to direction.
 Nodes can also be intermediate.
\end_layout

\begin_layout Standard
An example of a BN created and visualized using Netica is presented in figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:exampleBN"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename figures/net_Example.pdf
	lyxscale 35
	scale 35

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:exampleBN"

\end_inset

Example of a Netica BN showing input (outlined in a red box) and output
 (outlined in a blue box) nodes, edges (black lines) and, in this case,
 a single intermediate node (recharge).
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Calculations are made using the BN based on conditional probabilities using
 Bayes’ Theorem 
\begin_inset Formula 
\begin{equation}
p\left(F_{i}|O_{j}\right)=\frac{p\left(O_{j}|F_{i}\right)p\left(F_{i}\right)}{p\left(O_{j}\right)}\label{eq:bayesthm}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $p\left(F_{i}|O_{j}\right)$
\end_inset

 is the updated (posterior) probability of a forecast 
\begin_inset Formula $\left(F_{i}\right)$
\end_inset

 given (conditional on) a set of observations 
\begin_inset Formula $\left(O_{j}\right)$
\end_inset

; 
\begin_inset Formula $p\left(O_{j}|F_{i}\right)$
\end_inset

 is the likelihood function, 
\begin_inset Formula $p\left(F_{i}\right)$
\end_inset

 is the prior probability of the forecast, and 
\begin_inset Formula $p\left(O_{j}\right)$
\end_inset

 is a normalizing constant.
 As discussed above, the calibration to field measurements was necessarily
 loose due to the paucity of data in both space and time.
 For training a BN, it would be ideal to use direct observations of the
 underlying system, but that level of information is rarely possible and
 the model must serve as a proxy for the real system.
 In cases with sufficient data, a direct correspondence between the BN ability
 to reproduce process model ‘‘observations’’ and the process model ability
 to reproduce field observations could be assessed.
 The underlying process model is required to link the observations that
 can be made (such as island width and island elevation) to those that must
 be inferred by using the model (such as ground- water position and recharge).
 The posterior probability reflects an updating that is achieved by considering
 the entire chain of conditional probabilities of all bins connected to
 the node representing Fi.
 The likelihood function represents the probability that the observations
 (Oj) would be observed given that the forecast was perfectly known.
 This is a metric of the ability of the BN to function as a forecasting
 device and imperfections in such forecasts are a function of epistemic
 uncertainty.
 Epistemic uncertainty includes uncertainty due to model imperfection, data
 errors, and other sources.
 The prior probability of the forecast, p(Fi), is the probability of a forecast
 without the benefit of the observations and the BN (or a process model
 or other experiment).
 p(Fi) may be calculated by using expert knowledge, or may be assumed relatively
 uninformative to make the entire process as objective as practical (similar
 to an ignorance prior as in Jaynes and Bretthorst [2003]).
 A common prior often used in BNs is the division of a node into bins of
 equal probability.
 This is the approach generally followed in this work, resulting in bins
 of equal probability or ‘‘belief’’ although it is not exactly an ignorance
 prior because the probability mass in each bin may differ due to variable
 bin widths.
 Figure 3 shows the layout of the Assateague island Bayesian network with
 prior probabilities expressed like histograms as ‘‘belief bars.’’ It is
 possible to evaluate the contribution to all uncertainty values calculated
 by the BN by expressing the uncertainty in the prior probabilities.
 In this work, the model is assumed (for the sake of proving the concept)
 to be perfect and the only prior variability is a function of sampling
 each value and assigning it to bins.
 [26] Once a system is cast in a BN, new observations of system state are
 applied and propagated through the BN using Bayes’ theorem such that all
 forecasts made in the model are contingent upon the specific observations
 of system state.
 In other words, each forecast is associated with a specific configuration
 of observations of system state.
 Observations are indicated by selecting a bin and forcing the probability
 of a value in the node to be 100% (Figure 4).
 When this operation is performed, the Bayesian update propagates in each
 direction among nodes that are d-connected [Jensen and Nielsen, 2001],
 updating the probabilities regardless of causal direction.
 In this way, correlations are expressed as well as causal responses.
 By selecting a suite of observations of state, the BN functions like a
 transfer function by providing an estimate of the fore- cast of interest
 and associated uncertainty.
 [27] A key piece of a priori information is the establishment of edges
 connecting the nodes.
 Edges should reflect a cascade of causality grounded in an understanding
 of the underlying process being modeled.
 If multiple processes from different models are to be linked, the selection
 of edge relationships defines the linkage.
 Similarly, a BN emulating a numerical model could be linked to a simpli-
 fied BN based on expert knowledge or empirical observations representing
 a different process.
 While machine learning can be used to teach a BN which parameters are connected
 to each other and to outputs, we adopt the more common method in which
 expert system understanding is used to specify these connections through
 the identification of nodes and edges.
 In this way, the BN honors the physical conditions known by the modeler,
 incorporated as soft knowledge.
 [28] In Figure 3, arrows on the edges indicate the direction of causal
 dependence.
 When all nodes are d-connected, the direction of the edge arrows serve
 no purpose.
 However, in the context of d-separation, the direction of causality has
 important ramifications on the propagation of uncertainty from observations
 to forecasts.
 [29] When computational conditions and problem size permit, a conditional
 probability table (CPT) can be created that directly enumerates the conditional
 probabilities of all nodes in the BN.
 This becomes impractical rapidly, how- ever, because the size of the CPT
 scales on the order of n dkþ1 where n is the number of nodes, d is the
 number of bins, and k is the number of parents for a node.
 In the case, where full enumeration is impractical due to this rapid increase
 in computational expense with complexity, an iterative expectation-maximization
 (EM) algorithm is used [Dempster et al., 1977] to calculate approximate
 probabilities and maximum-likelihood values for the BN without full enumeration
 of the CPT.
 The EM algorithm iterates between estimating the maximum log likelihood
 of the function and finding the set of parameters resulting in that maximum
 log likelihood.
\end_layout

\begin_layout Section
CVNetica Code
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{linenumbers}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
CVNetica is a Python module that performs cross-validation and calculates
 other performance metrics on BNs created with the Netica software package.
 Netica is a commercial package with more power than open-source alternatives.
 However, CVNetica is open-source and freely available.
 
\end_layout

\begin_layout Standard
The core functionality of CVNetica is based around the concept of 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{linenumbers}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Working with Ctypes
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{linenumbers}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Netica software provides APIs for accessing and using the functions
 within it.
 Several versions of these APIs are available as precompiled libraries.
 To interface with Python, the C programming language APIs can be interfaced
 with using ctypes which is built-in to Python 2.7+.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{linenumbers}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Details about program structure
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{linenumbers}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
What did we actually implement?
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{linenumbers}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Example Results
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{linenumbers}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
What do we get out of this kind of analysis? Use the Lake Michigan Basin
 model or maybe the Navy stuff?
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{linenumbers}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Discussion
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{linenumbers}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Wrap it all up here
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{linenumbers}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Acknowledgements
\end_layout

\begin_layout Standard
This work was funded by (ASIS and GLAS others depending on which example
 application we use).
 We are deeply grateful to Steven Mascaro for his initial PyNetica.py code
 which he kindly shared as a starting point for this work.
\end_layout

\begin_layout Section
References
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "GW"
options "elsarticle-num-names"

\end_inset


\end_layout

\end_body
\end_document
